openapi: 3.1.0
info:
  version: 0.9.0
  title: AgriStack Consent Management (ACM) APIs
    # termsOfService: https://example.com/terms/
  contact:
    email: saurabh.panjwani [AT-the-RATE-of] gmail.com
      # url: http://example.com/contact
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: https://redocly.github.io/openapi-template/logo.png
  description: >
    This is the set of all AgriStack Consent Management (ACM) APIs written using OpenAPI
    specification.

    # Introduction

    ## This API definition is intended to to be a good starting point for
    # describing your API in [OpenAPI/Swagger
    # format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md).

    # It also demonstrates features of the
    # [create-openapi-repo](https://github.com/Redocly/create-openapi-repo) tool
    # and the [Redoc](https://github.com/Redocly/Redoc) documentation engine. Beyond
    # the standard OpenAPI syntax, we use a few 
    # [vendor extensions](https://github.com/Redocly/Redoc/blob/master/docs/redoc-vendor-extensions.md).

    # OpenAPI Specification

    The goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which
    allows both humans and computers to discover and understand the capabilities
    of the service without access to source
    code, documentation, or through network traffic inspection. When properly
    defined via OpenAPI, a consumer can 
    understand and interact with the remote service with a minimal amount of
    implementation logic. Similar to what
    interfaces have done for lower-level programming, OpenAPI removes the
    guesswork in calling the service.
tags:
  - name: NM
    description: Network Manager (NM) APIs
servers:
  - url: https://{tenant}/api/
    description: Server where the API is hosted
    variables:
      tenant:
        default: www
        description: Tenant ID 
paths:
  /nm/serviceInfo:
    $ref: paths/nm_serviceInfo.yaml
components:
  securitySchemes:
    #main_auth:
    #  type: oauth2
    #  flows:
    #    implicit:
    #      authorizationUrl: http://example.com/api/oauth/dialog
    #      scopes:
    #        read:users: read users info
    #        write:users: modify or remove users
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
